/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
	{
		public ENTITY_FORBID_COUNTER createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITY_FORBID_COUNTER datas = new ENTITY_FORBID_COUNTER();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt8());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITY_FORBID_COUNTER v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt8(v[i]);
			};
		}
	}



	public class DATATYPE_ENTITYID_LIST : DATATYPE_BASE
	{
		public ENTITYID_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITYID_LIST datas = new ENTITYID_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITYID_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AVATAR_INFO : DATATYPE_BASE
	{
		public AVATAR_INFO createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFO datas = new AVATAR_INFO();
			datas.dbid = stream.readUint64();
			datas.name = stream.readUnicode();
			datas.roleType = stream.readUint8();
			datas.level = stream.readUint16();
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFO v)
		{
			stream.writeUint64(v.dbid);
			stream.writeUnicode(v.name);
			stream.writeUint8(v.roleType);
			stream.writeUint16(v.level);
		}
	}



	public class DATATYPE_AVATAR_INFO_LIST : DATATYPE_BASE
	{
		private DATATYPE__AVATAR_INFO_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__AVATAR_INFO_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__AVATAR_INFO_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_AVATAR_INFO itemType = new DATATYPE_AVATAR_INFO();

			public List<AVATAR_INFO> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<AVATAR_INFO> datas = new List<AVATAR_INFO>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<AVATAR_INFO> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public AVATAR_INFO_LIST createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFO_LIST datas = new AVATAR_INFO_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFO_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_ITEM_INFO : DATATYPE_BASE
	{
		public ITEM_INFO createFromStreamEx(MemoryStream stream)
		{
			ITEM_INFO datas = new ITEM_INFO();
			datas.UUID = stream.readUint64();
			datas.itemId = stream.readInt32();
			datas.itemCount = stream.readUint32();
			datas.itemIndex = stream.readInt32();
			return datas;
		}

		public void addToStreamEx(Bundle stream, ITEM_INFO v)
		{
			stream.writeUint64(v.UUID);
			stream.writeInt32(v.itemId);
			stream.writeUint32(v.itemCount);
			stream.writeInt32(v.itemIndex);
		}
	}



	public class DATATYPE_ITEM_INFO_LIST : DATATYPE_BASE
	{
		private DATATYPE__ITEM_INFO_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__ITEM_INFO_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__ITEM_INFO_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_ITEM_INFO itemType = new DATATYPE_ITEM_INFO();

			public List<ITEM_INFO> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<ITEM_INFO> datas = new List<ITEM_INFO>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<ITEM_INFO> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public ITEM_INFO_LIST createFromStreamEx(MemoryStream stream)
		{
			ITEM_INFO_LIST datas = new ITEM_INFO_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, ITEM_INFO_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_AnonymousArray_30 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_31 : DATATYPE_BASE
	{
		public List<UInt32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<UInt32> datas = new List<UInt32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUint32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<UInt32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUint32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_32 : DATATYPE_BASE
	{
		public List<string> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<string> datas = new List<string>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readUnicode());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<string> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeUnicode(v[i]);
			};
		}
	}


}